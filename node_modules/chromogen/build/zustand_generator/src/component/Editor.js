"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_textarea_code_editor_1 = __importDefault(require("@uiw/react-textarea-code-editor"));
const Numbers_1 = __importDefault(require("./Numbers"));
const Header_1 = require("./Header");
const RecordingButton_1 = __importDefault(require("./Buttons/RecordingButton"));
const editorStyle = {
    display: 'flex',
    flexDirection: 'column',
    height: '100%',
    overflow: 'auto',
    borderLeft: '1px solid rgba(243,246,248,.1)',
    backgroundColor: '#1C1C1C',
    width: '50vw',
};
const codePanel = {
    display: 'flex',
    overflowY: 'scroll',
    height: 'calc(100vh - 56px)',
};
const Editorfield = ({ code, isHidden, setIsHidden }) => {
    const [, setInnerCode] = (0, react_1.useState)(code);
    let breakLine = 0;
    for (let curr = 0; curr < code.length; curr++) {
        if (code[curr] == '\n')
            breakLine++;
    }
    console.log(breakLine);
    return (react_1.default.createElement("div", { style: editorStyle },
        react_1.default.createElement(Header_1.Header, { isHidden: isHidden, setIsHidden: setIsHidden }),
        react_1.default.createElement("div", { style: codePanel },
            react_1.default.createElement(Numbers_1.default, { number: breakLine ? breakLine + 10 : 0 }),
            react_1.default.createElement(react_textarea_code_editor_1.default, { "data-color-mode": "dark", value: code, language: "js", placeholder: "", onChange: (evn) => setInnerCode(evn.target.value), padding: 15, style: {
                    maxWidth: 1000,
                    width: 'calc(100% - 60px)',
                    maxHeight: '100vh',
                    overflow: 'visible',
                    fontSize: 12,
                    backgroundColor: '#1c1c1c',
                    fontFamily: 'ui-monospace, SFMono-Regular, SF Mono, Consolas, Liberation Mono, Menlo,monospace',
                } })),
        react_1.default.createElement(RecordingButton_1.default, null)));
};
exports.default = Editorfield;
